// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  NEOTER
}

enum RoundType {
  text
  number
  select
}


model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  username String @unique
  password String
  role Role @default(NEOTER)
}

model Division {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  subdivisions Subdivision[]
}

model Subdivision {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  divisionId String @db.ObjectId 
  division Division @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  players Player[]
}

model Player {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  playerName String
  name String
  subdivisionId String @db.ObjectId
  isActive Boolean @default(true)
  scores Score[]

  subdivision Subdivision @relation(fields: [subdivisionId], references: [id], onDelete: Cascade)
}

model Event {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  desc String
  sequence Int
  rounds Round[]
}

model Round {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  type RoundType @default(text)
  sequence Int
  eventId String @db.ObjectId
  selectOptions SelectOption[]
  scores Score[]

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

}

model SelectOption {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  roundId String @db.ObjectId
  
  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)
} 

model Score {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  roundId String @db.ObjectId
  playerId String @db.ObjectId
  textScore String?
  numberScore Float? 
  selectedOptionId String? @db.ObjectId

  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([roundId, playerId])
}